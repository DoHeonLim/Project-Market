// File Name : prisma/schema.prisma
// Description : 프리즈마 설정
// Author : 임도헌

// History
// Date        Author   Status    Description
// 2024.10.06  임도헌   Created
// 2024.10.06  임도헌   Modified   유저 모델 추가
// 2024.10.11  임도헌   Modified   SMS토큰 모델 추가
// 2024.10.14  임도헌   Modified   제품 모델 추가
// 2024.11.01  임도헌   Modified   게시글 모델 추가
// 2024.11.01  임도헌   Modified   좋아요 모델 추가
// 2024.11.01  임도헌   Modified   댓글 모델 추가
// 2024.11.08  임도헌   Modified   채팅방 모델 추가
// 2024.11.08  임도헌   Modified   채팅 메세지 모델 추가
// 2024.11.12  임도헌   Modified   라이브 스트리밍 모델 추가
// 2024.11.15  임도헌   Modified   채팅 메시지 읽음 여부 추가
// 2024.11.15  임도헌   Modified   채팅방에 제품Id도 추가(어떤 제품의 채팅방인가? 체크)
// 2024.11.21  임도헌   Modified   chatroom을 ProductChatRoom 으로 이름 변경
// 2024.11.21  임도헌   Modified   StreamChatRoom 및 StreamMessage 모델 추가

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int               @id @default(autoincrement())
  username             String            @unique
  email                String?           @unique
  password             String?
  phone                String?           @unique
  github_id            String?           @unique
  avatar               String?
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  tokens               SMSToken[]
  products             Product[]         @relation("Seller") //유저가 판매자로서 등록한 제품
  purchased_products   Product[]         @relation("PurchaseUser") //유저가 구매한 제품
  reservation_products Product[]         @relation("ReservationUser") //유저가 구매한 제품
  posts                Post[]
  comments             Comment[]
  likes                Like[]
  product_chat_rooms   ProductChatRoom[]
  product_messages     Message[]
  livestreams          LiveStream[]
  streamMessages       StreamMessage[]
  Review               Review[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  phone      String?  @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

// 판매 제품에 산 유저(purchaseUser) 추가해야되고, 판매 시간(purchaseDate) 추가, 판매 시간으로 제품 판매 여부 체크
// 판매여부는 판매 시간으로 추정이 가능하다.
model Product {
  id                 Int               @id @default(autoincrement())
  title              String
  price              Float
  description        String
  photo              String
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  user               User              @relation("Seller", fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
  chat_rooms         ProductChatRoom[]
  // 구매 관련 속성 추가
  reservation_at     DateTime? // 예약한 시간 (null이면 판매 상태로 간주)
  reservation_user   User?             @relation("ReservationUser", fields: [reservation_userId], references: [id], onDelete: SetNull)
  reservation_userId Int? // 예약한 유저의 ID (초기에는 null)
  purchase_user      User?             @relation("PurchaseUser", fields: [purchase_userId], references: [id], onDelete: SetNull)
  purchase_userId    Int? // 구매한 유저의 ID (초기에는 null)
  purchase_at        DateTime? // 제품 판매 시간 (null이면 미판매 상태로 간주)
  reviews            Review[] // 제품 리뷰
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int

  //composite ID를 사용해서 고유한 ID 생성
  //like는 Post에 한개만 가능
  //A라는 아이디로 B라는 포스트에 Like를 했을 경우
  //A와 B를 합치게되면 고유한 ID를 만들 수 있게 된다.
  @@id(name: "id", [userId, postId])
}

model ProductChatRoom {
  id       String    @id @default(cuid())
  users    User[]
  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model StreamChatRoom {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  live_stream  LiveStream @relation(fields: [liveStreamId], references: [id])
  liveStreamId Int        @unique

  StreamMessage StreamMessage[]
}

model StreamMessage {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())

  stream_chat_room StreamChatRoom @relation(fields: [streamChatRoomId], references: [id])
  streamChatRoomId Int
  user             User           @relation(fields: [userId], references: [id])
  userId           Int
}

model Message {
  id      Int      @id @default(autoincrement())
  payload String
  isRead  Boolean? @default(false) //읽음 여부

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room              ProductChatRoom? @relation(fields: [productChatRoomId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id])
  userId            Int
  productChatRoomId String?
}

model LiveStream {
  id         Int    @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  StreamChatRoom StreamChatRoom?
}

// Prisma에서 enum 사용 불가능 하기때문에 서버쪽에서 제약조건 추가
model Review {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id]) //작성자
  userId    Int
  product   Product @relation(fields: [productId], references: [id]) // 어떤 제품에 리뷰 했는가?
  productId Int     @unique
  payload   String
  rate      Int
}
