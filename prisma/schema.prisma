// File Name : prisma/schema.prisma
// Description : 프리즈마 설정
// Author : 임도헌

// History
// Date        Author   Status    Description
// 2024.10.06  임도헌   Created
// 2024.10.06  임도헌   Modified   유저 모델 추가
// 2024.10.11  임도헌   Modified   SMS토큰 모델 추가
// 2024.10.14  임도헌   Modified   제품 모델 추가
// 2024.11.01  임도헌   Modified   게시글 모델 추가
// 2024.11.01  임도헌   Modified   좋아요 모델 추가
// 2024.11.01  임도헌   Modified   댓글 모델 추가
// 2024.11.08  임도헌   Modified   채팅방 모델 추가
// 2024.11.08  임도헌   Modified   채팅 메세지 모델 추가
// 2024.11.12  임도헌   Modified   라이브 스트리밍 모델 추가

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  username   String       @unique
  email      String?      @unique
  password   String?
  phone      String?      @unique
  github_id  String?      @unique
  avatar     String?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  tokens     SMSToken[]
  products   Product[]
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  chat_rooms ChatRoom[]
  messages   Message[]
  LiveStream LiveStream[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  phone      String?  @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int

  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id    String @id @default(cuid())
  users User[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
}

model LiveStream {
  id         Int    @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}
