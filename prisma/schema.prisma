// File Name : prisma/schema.prisma
// Description : 프리즈마 설정
// Author : 임도헌

// History
// Date        Author   Status    Description
// 2024.10.06  임도헌   Created
// 2024.10.06  임도헌   Modified   유저 모델 추가
// 2024.10.11  임도헌   Modified   SMS토큰 모델 추가
// 2024.10.14  임도헌   Modified   제품 모델 추가
// 2024.11.01  임도헌   Modified   게시글 모델 추가
// 2024.11.01  임도헌   Modified   좋아요 모델 추가
// 2024.11.01  임도헌   Modified   댓글 모델 추가
// 2024.11.08  임도헌   Modified   채팅방 모델 추가
// 2024.11.08  임도헌   Modified   채팅 메세지 모델 추가
// 2024.11.12  임도헌   Modified   라이브 스트리밍 모델 추가
// 2024.11.15  임도헌   Modified   채팅 메시지 읽음 여부 추가
// 2024.11.15  임도헌   Modified   채팅방에 제품Id도 추가(어떤 제품의 채팅방인가? 체크)
// 2024.11.21  임도헌   Modified   chatroom을 ProductChatRoom 으로 이름 변경
// 2024.11.21  임도헌   Modified   StreamChatRoom 및 StreamMessage 모델 추가
// 2024.12.10  임도헌   Modified   PostImage 모델 추가
// 2024.12.11  임도헌   Modified   ProductImage 모델 추가
// 2024.12.11  임도헌   Modified   ProductLike 모델 추가
// 2024.12.14  임도헌   Modified   badge 모델 추가
// 2024.12.14  임도헌   Modified   Notification 모델 추가
// 2024.12.14  임도헌   Modified   PushSubscription 모델 추가
// 2024.12.14  임도헌   Modified   NotificationPreferences 모델 추가
// 2024.12.14  임도헌   Modified   SearchHistory 모델 추가
// 2024.12.14  임도헌   Modified   SearchTag 모델 추가
// 2024.12.14  임도헌   Modified   PopularSearch 모델 추가

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 유저 모델
model User {
  id                   Int               @id @default(autoincrement())
  username             String            @unique //유저 이름
  email                String?           @unique //유저 이메일
  password             String? //유저 비밀번호
  phone                String?           @unique //유저 전화번호
  github_id            String?           @unique //유저 깃허브 아이디
  avatar               String? //유저 아바타
  created_at           DateTime          @default(now()) //유저 생성 시간
  updated_at           DateTime          @updatedAt //유저 정보 업데이트 시간  
  tokens               SMSToken[] //유저 SMS 토큰
  products             Product[]         @relation("Seller") //유저가 판매자로서 등록한 제품
  product_chat_rooms   ProductChatRoom[] //유저가 참여한 제품 채팅방
  product_messages     ProductMessage[] //유저가 제품 채팅방에 보낸 메세지
  product_likes        ProductLike[] //유저가 제품에 좋아요 누른 것
  purchased_products   Product[]         @relation("PurchaseUser") //유저가 구매한 제품
  reservation_products Product[]         @relation("ReservationUser") //유저가 구매한 제품
  posts                Post[] //유저가 작성한 게시글
  post_likes           PostLike[] //유저가 게시글에 좋아요 누른 것
  comments             Comment[] //유저가 게시글에 댓글 작성
  livestreams          LiveStream[] //유저가 라이브 스트리밍 참여
  stream_messages      StreamMessage[] //유저가 라이브 스트리밍 채팅방에 보낸 메세지
  reviews              Review[] //유저가 제품에 리뷰 작성
  badges               Badge?            @relation(fields: [badgeId], references: [id]) //유저가 가지고 있는 뱃지
  badgeId              Int? //유저가 가지고 있는 뱃지의 ID

  notifications            Notification[] //유저가 받은 알림
  push_subscriptions       PushSubscription[] //유저가 푸시 구독
  notification_preferences NotificationPreferences? //유저가 알림 설정
  search_histories         SearchHistory[] //유저가 검색한 기록

  @@index([username]) // 사용자명 검색용
}

// 뱃지 모델
model Badge {
  id          Int      @id @default(autoincrement())
  name        String //뱃지 이름
  icon        String //뱃지 아이콘
  description String //뱃지 설명
  users       User[] //뱃지를 가지고 있는 유저
  created_at  DateTime @default(now()) //뱃지 생성 시간
}

// 제품 리뷰 모델
// Prisma에서 enum 사용 불가능 하기때문에 서버쪽에 제약조건 추가
model Review {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id]) //작성자
  userId    Int
  product   Product @relation(fields: [productId], references: [id]) // 어떤 제품에 리뷰 했는가?
  productId Int
  payload   String //리뷰 내용
  rate      Int //리뷰 별점

  @@index([productId]) // 제품별 리뷰
  @@index([userId]) // 사용자별 리뷰
  @@index([rate]) // 평점 기준 정렬
}

// SMS 인증 모델
model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique //SMS 인증 토큰
  phone      String?  @unique //SMS 인증 전화번호
  created_at DateTime @default(now()) //SMS 인증 생성 시간
  updated_at DateTime @updatedAt //SMS 인증 업데이트 시간
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) //SMS 인증 유저
  userId     Int
}

// 제품 모델
// 판매 제품에 산 유저(purchaseUser) 추가해야되고, 판매 시간(purchaseDate) 추가, 판매 시간으로 제품 판매 여부 체크
// 판매여부는 판매 시간으로 추정이 가능하다.
model Product {
  id                 Int               @id @default(autoincrement())
  title              String //제품 이름
  price              Float //제품 가격
  description        String //제품 설명
  images             ProductImage[] // 이미지 관계 추가
  created_at         DateTime          @default(now()) //제품 생성 시간
  updated_at         DateTime          @updatedAt //제품 업데이트 시간
  user               User              @relation("Seller", fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
  chat_rooms         ProductChatRoom[]
  // 구매 관련 속성 추가
  reservation_at     DateTime? // 예약한 시간 (null이면 판매 상태로 간주)
  reservation_user   User?             @relation("ReservationUser", fields: [reservation_userId], references: [id], onDelete: SetNull)
  reservation_userId Int? // 예약한 유저의 ID (초기에는 null)
  purchase_user      User?             @relation("PurchaseUser", fields: [purchase_userId], references: [id], onDelete: SetNull)
  purchase_userId    Int? // 구매한 유저의 ID (초기에는 null)
  purchased_at       DateTime? // 제품 판매 시간 (null이면 미판매 상태로 간주)
  reviews            Review[] // 제품 리뷰
  product_likes      ProductLike[]

  game_type    String // 보드게임, TRPG, 카드게임
  min_players  Int // 최소 플레이어 수
  max_players  Int // 최대 플레이어 수
  play_time    String // 플레이 시간
  condition    String // 새제품급, 거의새것, 사용감있음, 많이사용됨
  completeness String // "구성품전체", "부품일부없음", "호환품포함"
  has_manual   Boolean // 사용설명서 포함 여부
  views        Int     @default(0) // 조회수

  category    Category    @relation(fields: [categoryId], references: [id]) // 카테고리
  categoryId  Int
  search_tags SearchTag[] // 제품 검색 태그

  @@index([title]) // 제품명 검색용
  @@index([created_at]) // 최신순 정렬용
  @@index([price]) // 가격 필터링용
  @@index([categoryId]) // 카테고리 필터링용
}

// 카테고리 모델
model Category {
  id          Int        @id @default(autoincrement())
  name        String // 전략, 가족, 파티, 협력 등
  icon        String? // 카테고리 아이콘
  description String?
  products    Product[]
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[] @relation("CategoryHierarchy")

  @@index([parentId]) // 부모 카테고리 조회
}

//  productStatus = {
//   condition: {
//     LIKE_NEW: "새제품급 (미개봉/1회미만)",
//     EXCELLENT: "거의새것 (1-3회사용)",
//     GOOD: "사용감있음 (4-10회사용)",
//     FAIR: "많이사용됨 (10회이상)"
//   },
//   completeness: {
//     COMPLETE: "구성품전체 (전체구성품 보유)",
//     PARTIAL: "부품일부없음 (일부 구성품 누락)",
//     REPLACED: "호환품포함 (대체구성품 포함)"
//   }
// };

// 제품 이미지 모델
model ProductImage {
  id         Int      @id @default(autoincrement())
  url        String //이미지 주소
  order      Int      @default(0) // 이미지 순서
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade) //제품 이미지
  productId  Int
  created_at DateTime @default(now()) //이미지 생성 시간
  updated_at DateTime @updatedAt //이미지 업데이트 시간
}

// 제품 좋아요 모델 추가
model ProductLike {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId    Int
  productId Int

  @@id(name: "id", [userId, productId])
}

// 제품 채팅방 모델
model ProductChatRoom {
  id       String           @id @default(cuid())
  users    User[] //채팅방 참여 유저
  messages ProductMessage[] //채팅방 메세지

  created_at DateTime @default(now()) //채팅방 생성 시간
  updated_at DateTime @updatedAt //채팅방 업데이트 시간

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

// 제품 채팅 메세지 모델
model ProductMessage {
  id      Int      @id @default(autoincrement())
  payload String
  isRead  Boolean? @default(false) //읽음 여부

  created_at DateTime @default(now()) //메세지 생성 시간
  updated_at DateTime @updatedAt //메세지 업데이트 시간

  room              ProductChatRoom? @relation(fields: [productChatRoomId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id])
  userId            Int
  productChatRoomId String?
}

// 게시글 모델
model Post {
  id          Int         @id @default(autoincrement())
  title       String //게시글 제목
  description String? //게시글 설명
  category    String //교역소, 선원모집, 항해일지, 해도, 나침반
  views       Int         @default(0) //게시글 조회수
  created_at  DateTime    @default(now()) //게시글 생성 시간
  updated_at  DateTime    @updatedAt //게시글 업데이트 시간
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade) //게시글 작성자
  userId      Int
  comments    Comment[] //게시글 댓글
  post_likes  PostLike[] //게시글 좋아요
  images      PostImage[] // 이미지 관계 추가
}

// communityCategories = {
//   trade: '교역소',              // 거래 게시판
//   gathering: '선원모집',        // 모임 찾기
//   review: '항해일지',           // 게임 리뷰
//   rules: '해도(海圖)',          // 규칙 설명
//   qna: '나침반',               // 질문/답변
// }

// 게시글 이미지 모델
model PostImage {
  id         Int      @id @default(autoincrement())
  url        String //이미지 주소
  order      Int      @default(0) //이미지 순서
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade) //게시글 이미지
  postId     Int
  created_at DateTime @default(now()) //이미지 생성 시간
  updated_at DateTime @updatedAt //이미지 업데이트 시간
}

// 게시글 좋아요 모델 이름 변경
model PostLike {
  created_at DateTime @default(now()) //좋아요 생성 시간
  updated_at DateTime @updatedAt //좋아요 업데이트 시간
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) //좋아요 유저
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade) //좋아요 게시글
  userId     Int //좋아요 유저 아이디
  postId     Int //좋아요 게시글 아이디

  //composite ID를 사용해서 고유한 ID 생성
  //like는 Post에 한개만 가능
  //A라는 아이디로 B라는 포스트에 Like를 했을 경우
  //A와 B를 합치게되면 고유한 ID를 만들 수 있게 된다.
  @@id(name: "id", [userId, postId])
}

// 게시글 댓글 모델
model Comment {
  id         Int      @id @default(autoincrement())
  payload    String //댓글 내용
  created_at DateTime @default(now()) //댓글 생성 시간
  updated_at DateTime @updatedAt //댓글 업데이트 시간

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

// 라이브 스트리밍 모델
model LiveStream {
  id         Int    @id @default(autoincrement()) //라이브 스트리밍 고유 아이디
  title      String //라이브 스트리밍 제목
  stream_key String //라이브 스트리밍 키
  stream_id  String //라이브 스트리밍 아이디

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade) //라이브 스트리밍 유저
  userId         Int
  streamChatRoom StreamChatRoom? //라이브 스트리밍 채팅방
}

// 라이브 스트리밍 채팅방 모델
model StreamChatRoom {
  id Int @id @default(autoincrement()) //라이브 스트리밍 채팅방 고유 아이디

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  live_stream  LiveStream @relation(fields: [liveStreamId], references: [id], onDelete: Cascade)
  liveStreamId Int        @unique

  stream_messages StreamMessage[] //라이브 스트리밍 채팅 메세지
}

// 라이브 스트리밍 채팅 메세지 모델
model StreamMessage {
  id      Int    @id @default(autoincrement())
  payload String //라이브 스트리밍 채팅 메세지 내용

  created_at DateTime @default(now()) //라이브 스트리밍 채팅 메세지 생성 시간

  stream_chat_room StreamChatRoom @relation(fields: [streamChatRoomId], references: [id], onDelete: Cascade)
  streamChatRoomId Int
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
}

// 알림 모델
model Notification {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  title String // 알림 제목
  body  String // 알림 내용
  image String? // 알림 이미지 (선택)

  type String // "CHAT", "TRADE", "REVIEW", "BADGE", "SYSTEM" 등
  link String? // 알림 클릭시 이동할 링크

  isRead     Boolean  @default(false) // 읽음 여부
  created_at DateTime @default(now())

  // 푸시 알림 전송 상태 추적
  isPushSent Boolean   @default(false) // 푸시 발송 여부
  sentAt     DateTime? // 푸시 발송 시간

  @@index([userId, created_at]) // 사용자별 최근 알림
  @@index([isRead]) // 읽지 않은 알림 필터링
}

// PWA 푸시 구독 정보 모델
model PushSubscription {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  endpoint  String  @unique // 푸시 서비스 엔드포인트
  p256dh    String // 공개키
  auth      String // 인증키
  userAgent String? // 사용자 기기 정보

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  last_used  DateTime? // 마지막 푸시 발송 시간

  // 구독 상태 관리
  isActive Boolean @default(true)

  @@index([userId]) // 사용자별 구독 정보
  @@index([isActive]) // 활성 구독 필터링
}

// 알림 설정 모델
model NotificationPreferences {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  // 알림 유형별 설정
  chat   Boolean @default(true) // 채팅 알림
  trade  Boolean @default(true) // 거래 알림
  review Boolean @default(true) // 리뷰 알림
  badge  Boolean @default(true) // 뱃지 알림
  system Boolean @default(true) // 시스템 알림

  // 푸시 알림 설정
  pushEnabled Boolean @default(true) // 푸시 알림 전체 설정

  // 알림 시간 설정
  quietHoursStart String? // 방해금지 시작 시간 (예: "22:00")
  quietHoursEnd   String? // 방해금지 종료 시간 (예: "08:00")
}

// 검색 기록 모델
model SearchHistory {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  keyword    String // 검색어
  created_at DateTime @default(now())

  // 검색 결과 분석용
  resultCount Int @default(0) // 검색 결과 수

  // 검색 조건 저장
  category  String? // 선택한 카테고리
  minPrice  Float? // 최소 가격
  maxPrice  Float? // 최대 가격
  game_type String? // 게임 타입
  condition String? // 상품 상태

  @@index([userId, created_at]) // 사용자별 최근 검색어
  @@index([keyword]) // 검색어 통계용
}

// 검색 태그 모델
model SearchTag {
  id         Int       @id @default(autoincrement())
  name       String    @unique // 태그명
  count      Int       @default(0) // 사용 횟수
  products   Product[] // 이 태그가 달린 상품들
  created_at DateTime  @default(now())

  @@index([name]) // 태그명 검색
  @@index([count]) // 인기 태그 정렬
}

// 인기 검색어 모델
model PopularSearch {
  id         Int      @id @default(autoincrement())
  keyword    String   @unique
  count      Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([count(sort: Desc)])
}
